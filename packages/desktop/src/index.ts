/* eslint-disable import/no-extraneous-dependencies */
// eslint-disable-next-line object-curly-newline
import { BrowserWindow, Display, app, ipcMain, screen } from 'electron';

import path from 'path';
import ElectronGoogleOAuth2 from '@getstation/electron-google-oauth2';
import { Channels, DEFAULT_APP_PRESET, DimensionChangeRequest } from './electron/constants';

import store from './electron/store';

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
// eslint-disable-next-line global-require
if (require('electron-squirrel-startup')) {
  // eslint-disable-line global-require
  app.quit();
}

// Keep a global reference of the window object, if you don't, the window will
// be closed automatically when the JavaScript object is garbage collected.
let browserWindow: BrowserWindow;

const myApiOauth = new ElectronGoogleOAuth2(
  '423533244953-banligobgbof8hg89i6cr1l7u0p7c2pk.apps.googleusercontent.com',
  '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',
  [''],
  { successRedirectURL: 'http://localhost:3000/auth/success' },
);

// FRESH GOOGLE LOGIN...either no json web tokens or trying to sign in with another account.
export default async function handleGoogleLogin() {
  const tokens = await myApiOauth.openAuthWindowAndGetTokens();

  browserWindow.webContents.send(Channels.GOOGLE_AUTH_TOKENS, tokens);
}

let display: Display;

const createWindow = (): void => {
  // Create the browser window.
  browserWindow = new BrowserWindow({
    ...DEFAULT_APP_PRESET,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      sandbox: true,
    },
    icon: './assets/1024x1024.icns',

    // transparent: true,

    // backgroundColor: "#00000000",

    frame: false,
    roundedCorners: true,
  });

  // browserWindow.setBackgroundColor("#00000000");

  // browserWindow.setIgnoreMouseEvents(true);
  // browserWindow.setFocusable(true);

  // and load the index.html of the app.
  browserWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  browserWindow.webContents.openDevTools({ mode: 'detach' });

  display = screen.getPrimaryDisplay();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app
  .whenReady()
  .then(createWindow)
  .then(() => {
    // activate login
    ipcMain.on(Channels.ACTIVATE_LOG_IN, async (event, arg) => {
      console.log('initiating log in');
      await handleGoogleLogin();
    });

    // access storage/cookies
    ipcMain.on('electron-store-set', async (event, key, val) => {
      store.set(key, val);
    });
    ipcMain.handle('electron-store-get', async (event, val) => {
      const result = await store.get(val);
      return result;
    });

    // dynamically changing the window bounds
    ipcMain.on(Channels.RESIZE_WINDOW, (event, req: DimensionChangeRequest) => {
      if (req.setAlwaysOnTop) {
        browserWindow.setAlwaysOnTop(true, 'floating');
      } else {
        browserWindow.setAlwaysOnTop(false);
      }

      if (req.addDimensions) {
        const currentDimensions = browserWindow.getSize();
        browserWindow.setSize(
          currentDimensions[0] + req.dimensions.width,
          currentDimensions[1] + req.dimensions.height,
          false,
        );
      } else {
        browserWindow.setSize(req.dimensions.width, req.dimensions.height, false);
      }

      if (req.setPosition) {
        if (req.setPosition === 'center') {
          browserWindow.center();
        }

        if (req.setPosition === 'topRight') {
          browserWindow.setPosition(display.bounds.width - req.dimensions.width, 0);
        }
      }
    });
  })
  .then(() => {
    // globalShortcut.register("`", () => {
    //   console.log("Electron loves global shortcuts!");
    // });

    // on blur, show overlay, and tell app to trigger overlay mode
    browserWindow.on('blur', () => {
      browserWindow.webContents.send(Channels.ON_WINDOW_BLUR);
    });
  });

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

// open deep links from nirvana web app
if (process.defaultApp) {
  if (process.argv.length >= 2) {
    app.setAsDefaultProtocolClient('nirvana-desktop', process.execPath, [
      path.resolve(process.argv[1]),
    ]);
  }
} else {
  app.setAsDefaultProtocolClient('nirvana-desktop');
}

// Handle the protocol. In this case, we choose to show an Error Box.
app.on('open-url', (event, url) => {
  console.log('welcome back, you arrived from: ', url);

  browserWindow.focus();
});
